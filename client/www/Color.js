// Generated by CoffeeScript 1.4.0
(function() {

  define([], function() {
    /*
      Converts an RGB color value to HSL. Conversion formula
      adapted from http://en.wikipedia.org/wiki/HSL_color_space.
      Assumes r, g, and b are contained in the set [0, 255] and
      returns h, s, and l in the set [0, 1].
    
      @param   Number  r       The red color value
      @param   Number  g       The green color value
      @param   Number  b       The blue color value
      @return  Array           The HSL representation
    */

    var Color, append, hslToRgb, hsvToRgb, rgbToHsl, rgbToHsv;
    rgbToHsl = function(r, g, b) {
      var d, h, l, max, min, s, _ref;
      r /= 255;
      g /= 255;
      b /= 255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      h = (max + min) / 2;
      s = h;
      l = h;
      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
          case r:
            h = (g - b) / d + ((_ref = g < b) != null ? _ref : {
              6: 0
            });
            break;
          case g:
            h = (b - r) / d + 2;
            break;
          case b:
            h = (r - g) / d + 4;
        }
        h /= 6;
      }
      return [h, s, l];
    };
    /*
      Converts an HSL color value to RGB. Conversion formula
      adapted from http://en.wikipedia.org/wiki/HSL_color_space.
      Assumes h, s, and l are contained in the set [0, 1] and
      returns r, g, and b in the set [0, 255].
    
      @param   Number  h       The hue
      @param   Number  s       The saturation
      @param   Number  l       The lightness
      @return  Array           The RGB representation
    */

    hslToRgb = function(h, s, l) {
      var b, g, hue2rgb, p, q, r;
      r = null;
      g = null;
      b = null;
      if (s === 0) {
        r = g = b = l;
      } else {
        hue2rgb = function(p, q, t) {
          if (t < 0) {
            t += 1;
          } else if (t > 1) {
            t -= 1;
          }
          if (t < 1 / 6) {
            return p + (q - p) * 6 * t;
          } else if (t < 1 / 2) {
            return q;
          } else if (t < 2 / 3) {
            return p + (q - p) * (2 / 3 - t) * 6;
          } else {
            return p;
          }
        };
        q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
      }
      return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)];
    };
    /*
      Converts an RGB color value to HSV. Conversion formula
      adapted from http://en.wikipedia.org/wiki/HSV_color_space.
      Assumes r, g, and b are contained in the set [0, 255] and
      returns h, s, and v in the set [0, 1].
    
      @param   Number  r       The red color value
      @param   Number  g       The green color value
      @param   Number  b       The blue color value
      @return  Array           The HSV representation
    */

    rgbToHsv = function(r, g, b) {
      var d, h, max, min, s, v;
      r /= 255;
      g /= 255;
      b /= 255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      h = max;
      s = max;
      v = max;
      d = max - min;
      s = max === 0 ? 0 : d / max;
      if (max === min) {
        h = 0;
      } else {
        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;
          case g:
            h = (b - r) / d + 2;
            break;
          case b:
            h = (r - g) / d + 4;
        }
        h /= 6;
      }
      return [h, s, v];
    };
    /*
      Converts an HSV color value to RGB. Conversion formula
      adapted from http://en.wikipedia.org/wiki/HSV_color_space.
      Assumes h, s, and v are contained in the set [0, 1] and
      returns r, g, and b in the set [0, 255].
    
      @param   Number  h       The hue
      @param   Number  s       The saturation
      @param   Number  v       The value
      @return  Array           The RGB representation
    */

    hsvToRgb = function(h, s, v) {
      var b, f, g, i, p, q, r, t;
      r = null;
      g = null;
      b = null;
      i = Math.floor(h * 6);
      f = h * 6 - i;
      p = v * (1 - s);
      q = v * (1 - f * s);
      t = v * (1 - (1 - f) * s);
      switch (i % 6) {
        case 0:
          r = v;
          g = t;
          b = p;
          break;
        case 1:
          r = q;
          g = v;
          b = p;
          break;
        case 2:
          r = p;
          g = v;
          b = t;
          break;
        case 3:
          r = p;
          g = q;
          b = v;
          break;
        case 4:
          r = t;
          g = p;
          b = v;
          break;
        case 5:
          r = v;
          g = p;
          b = q;
      }
      return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)];
    };
    append = function(l, v) {
      l.push(v);
      return l;
    };
    Color = (function() {

      function Color(r, g, b, a) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a != null ? a : 1;
      }

      Color.prototype.toRgb = function() {
        return [this.r, this.g, this.b];
      };

      Color.prototype.toRgba = function() {
        return [this.r, this.g, this.b, this.a];
      };

      Color.prototype.toHsl = function() {
        return rgbToHsl(this.r, this.g, this.b);
      };

      Color.prototype.toHsla = function() {
        return append(rgbToHsl(this.r, this.g, this.b)(this.a));
      };

      Color.prototype.toHsv = function() {
        return rgbToHsv(this.r, this.g, this.b);
      };

      Color.prototype.toHsva = function() {
        return append(rgbToHsv(this.r, this.g, this.b)(this.a));
      };

      Color.prototype.toString = function() {
        return "rgba(" + this.r + ", " + this.g + ", " + this.b + ", " + this.a + ")";
      };

      return Color;

    })();
    Color.fromRgba = function(r, g, b, a) {
      return new Color(r, g, b, a);
    };
    Color.fromRgb = function(r, g, b) {
      return new Color(r, g, b);
    };
    Color.fromHsla = function(h, s, l, a) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, append(hslToRgb(h, s, l), a), function(){});
    };
    Color.fromHsl = function(h, s, l) {
      return Color.fromHsla(h, s, l, 1);
    };
    Color.fromHsva = function(h, s, v, a) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Color, append(hsvToRgb(h, s, v), a), function(){});
    };
    Color.fromHsv = function(h, s, v) {
      return Color.fromHsva(h, s, v, 1);
    };
    return Color;
  });

}).call(this);
