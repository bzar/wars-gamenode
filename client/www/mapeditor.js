// Generated by CoffeeScript 1.3.3
(function() {

  require(["Theme", "Map", "gamenode", "base"], function(Theme, Map) {
    var client, exportMap, handleMouseDown, handleMouseEnter, handleMouseMove, handleMouseUp, importMap, initializeMap, initializeMapEditor, lastX, lastY, mapId, mapPainter, mouseDown, paintTile, resizeMap, saveMap, selectedBrush, session, setCanvasSize, shiftMapDown, shiftMapLeft, shiftMapRight, shiftMapUp, theme, updateBrushIcon, updatePalette;
    client = new GameNodeClient(Skeleton);
    session = null;
    mapId = /[?&]mapId=([0-9a-f]+)/.exec(window.location.search);
    if (mapId !== null) {
      mapId = mapId[1];
    }
    theme = null;
    mapPainter = null;
    mouseDown = false;
    lastX = null;
    lastY = null;
    $(document).ready(function() {
      var loginUrl;
      loginUrl = "login.html?next=" + document.location.pathname + document.location.search;
      return session = resumeSessionOrRedirect(client, WARS_CLIENT_SETTINGS.gameServer, loginUrl, function() {
        return client.stub.profile(function(response) {
          theme = new Theme(response.profile.settings.gameTheme);
          return theme.load(function() {
            mapPainter = new Map(undefined, 1.0, theme);
            populateNavigation(session);
            return initializeMapEditor(client);
          });
        });
      });
    });
    updatePalette = function() {
      var playerItems, playerSelection, selectedOwner, terrainPalette, terrainSelection, terrainSubtypePalette, terrainType, unitPalette, unitSelection;
      playerSelection = $("#playerSelection");
      terrainSelection = $("#terrainSelection");
      unitSelection = $("#unitSelection");
      terrainPalette = $("#terrainPalette");
      unitPalette = $("#unitPalette");
      playerItems = $(".playerSelection");
      playerItems.removeClass("enabled");
      playerItems.removeClass("disabled");
      if (terrainSelection.hasClass("selected")) {
        unitPalette.hide();
        terrainPalette.show();
        terrainType = $("#terrainTypePalette .sprite.selected").attr("type");
        terrainSubtypePalette = $("#terrainSubtypePalette");
        playerItems.each(function(ii, el) {
          var disabled, option, owner;
          option = $(el);
          owner = option.attr("value");
          disabled = $(".sprite[type=\"" + terrainType + "\"][owner=\"" + owner + "\"]", terrainSubtypePalette).length === 0;
          if (!disabled) {
            return option.addClass("enabled");
          }
        });
        if ($(".selected.enabled", playerSelection).length === 0) {
          if ($(".enabled", playerSelection).length !== 0) {
            playerItems.removeClass("selected");
            $($(".playerSelection.enabled")[0]).addClass("selected");
          }
        }
        selectedOwner = $(".playerSelection.selected").attr("value");
        $(".sprite", terrainSubtypePalette).hide();
        $(".sprite[type=\"" + terrainType + "\"][owner=\"" + selectedOwner + "\"]", terrainSubtypePalette).show();
        if ($(".sprite.selected:visible", terrainSubtypePalette).length === 0) {
          $(".sprite", terrainSubtypePalette).removeClass("selected");
          return $($(".sprite:visible", terrainSubtypePalette)[0]).addClass("selected");
        }
      } else {
        terrainPalette.hide();
        unitPalette.show();
        unitPalette = $("#unitPalette");
        playerItems.each(function(ii, el) {
          var disabled, option, owner;
          option = $(el);
          owner = option.attr("value");
          disabled = $(".sprite[owner=\"" + owner + "\"]", unitPalette).length === 0;
          if (!disabled) {
            return option.addClass("enabled");
          }
        });
        if ($(".selected.enabled", playerSelection).length === 0) {
          if ($(".enabled", playerSelection).length !== 0) {
            playerItems.removeClass("selected");
            $($(".playerSelection.enabled")[0]).addClass("selected");
          }
        }
        selectedOwner = $(".playerSelection.selected").attr("value");
        $(".sprite", unitPalette).hide();
        $(".sprite[owner=\"" + selectedOwner + "\"]", unitPalette).show();
        $("[type=\"null\"]", unitPalette).show();
        if ($(".selected:visible", unitPalette).length === 0) {
          $(".sprite", unitPalette).removeClass("selected");
          return $($(":visible", unitPalette)[0]).addClass("selected");
        }
      }
    };
    selectedBrush = function() {
      var selected, terrainSelection;
      terrainSelection = $("#terrainSelection");
      if (terrainSelection.hasClass("selected")) {
        selected = $($("#terrainSubtypePalette .sprite.selected")[0]);
        return {
          type: parseInt(selected.attr("type")),
          subtype: parseInt(selected.attr("subtype")),
          owner: parseInt(selected.attr("owner"))
        };
      } else {
        selected = $($("#unitPalette .selected")[0]);
        if (selected.attr("type") === "null") {
          return {
            unit: null
          };
        }
        return {
          unit: {
            type: parseInt(selected.attr("type")),
            owner: parseInt(selected.attr("owner"))
          }
        };
      }
    };
    paintTile = function(x, y, brush) {
      var tile;
      tile = mapPainter.getTile(x, y);
      if (!tile) {
        return;
      }
      if (brush.type != null) {
        tile.type = brush.type;
      }
      if (brush.subtype != null) {
        tile.subtype = brush.subtype;
      }
      if (brush.owner != null) {
        tile.owner = brush.owner;
      }
      if (brush.unit != null) {
        return tile.unit = brush.unit;
      }
    };
    resizeMap = function(width, height) {
      var h, i, mapSize, tile, w, x, y, _results, _results1;
      mapSize = mapPainter.getMapLimits().max;
      w = mapSize.e(1) + 1;
      h = mapSize.e(2) + 1;
      if (width > w) {
        x = w;
        while (x < width) {
          y = 0;
          while (y < h) {
            mapPainter.tiles.push({
              x: x,
              y: y - Math.floor(x / 2),
              type: 1,
              subtype: 0,
              owner: 0,
              unit: null
            });
            ++y;
          }
          ++x;
        }
      } else if (width < w) {
        i = 0;
        while (i < mapPainter.tiles.length) {
          tile = mapPainter.tiles[i];
          if (tile.x >= width) {
            mapPainter.tiles.splice(i, 1);
            i -= 1;
          }
          ++i;
        }
      }
      if (height > h) {
        x = 0;
        _results = [];
        while (x < width) {
          y = h;
          while (y < height) {
            mapPainter.tiles.push({
              x: x,
              y: y - Math.floor(x / 2),
              type: 1,
              subtype: 0,
              owner: 0,
              unit: null
            });
            ++y;
          }
          _results.push(++x);
        }
        return _results;
      } else if (height < h) {
        i = 0;
        _results1 = [];
        while (i < mapPainter.tiles.length) {
          tile = mapPainter.tiles[i];
          if (tile.y + Math.floor(tile.x / 2) >= height) {
            mapPainter.tiles.splice(i, 1);
            i -= 1;
          }
          _results1.push(++i);
        }
        return _results1;
      }
    };
    shiftMapUp = function() {
      var i, limits, tile;
      limits = mapPainter.getMapLimits();
      i = 0;
      while (i < mapPainter.tiles.length) {
        tile = mapPainter.tiles[i];
        if (tile.y === -Math.floor(tile.x / 2)) {
          tile.y = limits.max.e(2) - Math.floor(tile.x / 2);
        } else {
          tile.y -= 1;
        }
        ++i;
      }
      return mapPainter.refresh();
    };
    shiftMapDown = function() {
      var i, limits, tile;
      limits = mapPainter.getMapLimits();
      i = 0;
      while (i < mapPainter.tiles.length) {
        tile = mapPainter.tiles[i];
        if (tile.y + Math.floor(tile.x / 2) === limits.max.e(2)) {
          tile.y = -Math.floor(tile.x / 2);
        } else {
          tile.y += 1;
        }
        ++i;
      }
      return mapPainter.refresh();
    };
    shiftMapLeft = function() {
      var i, limits, tile;
      limits = mapPainter.getMapLimits();
      i = 0;
      while (i < mapPainter.tiles.length) {
        tile = mapPainter.tiles[i];
        if (tile.x === 0) {
          tile.x = limits.max.e(1);
          tile.y -= Math.floor(tile.x / 2);
        } else {
          tile.x -= 1;
          if (tile.x % 2) {
            tile.y += 1;
          }
        }
        ++i;
      }
      return mapPainter.refresh();
    };
    shiftMapRight = function() {
      var i, limits, tile;
      limits = mapPainter.getMapLimits();
      i = 0;
      while (i < mapPainter.tiles.length) {
        tile = mapPainter.tiles[i];
        if (tile.x === limits.max.e(1)) {
          tile.y += Math.floor(tile.x / 2);
          tile.x = 0;
        } else {
          tile.x += 1;
          if (tile.x % 2 === 0) {
            tile.y -= 1;
          }
        }
        ++i;
      }
      return mapPainter.refresh();
    };
    saveMap = function(name, funds) {
      var mapData;
      mapData = mapPainter.tiles;
      if (mapId === null) {
        return client.stub.createMap(name, funds, mapData, function(response) {
          var message;
          if (response.success) {
            mapId = response.mapId;
            history.pushState(undefined, undefined, document.location.pathname + "?mapId=" + mapId);
            $("#mapDeleteForm").show();
            message = $("#mapSavedMessage");
            message.show();
            return message.fadeOut(2000);
          } else {
            return alert("Error saving map!" + response.reason);
          }
        });
      } else {
        return client.stub.updateMap(mapId, name, funds, mapData, function(response) {
          var message;
          if (response.success) {
            message = $("#mapSavedMessage");
            message.show();
            return message.fadeOut(2000);
          } else {
            return alert("Error saving map!" + response.reason);
          }
        });
      }
    };
    importMap = function() {
      var info;
      info = JSON.parse($("#importExportData").val());
      if (info) {
        $("#mapName").val(info.name);
        $("#mapFunds").val(info.funds);
        mapPainter.tiles = info.data;
        setCanvasSize($("#mapEditorView"));
        return mapPainter.refresh();
      } else {
        return alert("Invalid map data!");
      }
    };
    exportMap = function() {
      var info;
      info = {
        name: $("#mapName").val(),
        funds: $("#mapFunds").val(),
        data: mapPainter.tiles
      };
      return $("#importExportData").val(JSON.stringify(info));
    };
    handleMouseDown = function(event) {
      mouseDown = true;
      handleMouseMove(event);
      return false;
    };
    handleMouseUp = function(event) {
      mouseDown = false;
      lastX = null;
      lastY = null;
      return false;
    };
    handleMouseMove = function(event) {
      var brush, x, y;
      if (mouseDown) {
        x = mapPainter.eventToTileX(event);
        y = mapPainter.eventToTileY(event);
        if (x !== lastX || y !== lastY) {
          brush = selectedBrush();
          paintTile(x, y, brush);
          mapPainter.refresh();
          lastX = x;
          lastY = y;
        }
      }
      return false;
    };
    handleMouseEnter = function(event) {
      return mouseDown = false;
    };
    setCanvasSize = function(canvas) {
      var height, mapSize, width;
      mapSize = mapPainter.getMapDimensions();
      width = mapSize.e(1);
      height = mapSize.e(2);
      canvas.attr("width", width);
      return canvas.attr("height", height);
    };
    initializeMap = function(canvas, mapData) {
      var mapLimits;
      mapPainter.canvas = canvas[0];
      mapPainter.tiles = mapData;
      setCanvasSize(canvas);
      mapLimits = mapPainter.getMapLimits();
      $("#mapWidth").val(mapLimits.max.e(1) + 1);
      $("#mapHeight").val(mapLimits.max.e(2) + 1);
      mapPainter.refresh();
      canvas.mousedown(handleMouseDown);
      canvas.mouseup(handleMouseUp);
      canvas.mousemove(handleMouseMove);
      return canvas.mouseenter(handleMouseEnter);
    };
    initializeMapEditor = function(client) {
      var canvas, mapProperties, mapSize, palette, playerSelection, pos, propPos, terrainOwner, terrainPalette, terrainProp, terrainSelection, terrainSubtype, terrainSubtypeItem, terrainSubtypePalette, terrainType, terrainTypeItem, terrainTypePalette, toolSelection, unitEraserItem, unitItem, unitOwner, unitPalette, unitSelection, unitType;
      canvas = $("#mapEditorView");
      mapPainter.doPreload(function() {
        var mapData, x, y;
        if (mapId !== null) {
          return client.stub.mapData(mapId, function(response) {
            var mapData;
            mapData = response.mapData;
            $("#mapName").val(response.name);
            $("#mapFunds").val(response.funds);
            return initializeMap(canvas, mapData);
          });
        } else {
          $("#mapDeleteForm").hide();
          mapData = [];
          y = 0;
          while (y < 15) {
            x = 0;
            while (x < 15) {
              mapData.push({
                x: x,
                y: y - Math.floor(x / 2),
                type: 1,
                subtype: 0,
                owner: 0,
                unit: null
              });
              ++x;
            }
            ++y;
          }
          return initializeMap(canvas, mapData);
        }
      });
      $("#showMapEditorTools").click(function(e) {
        e.preventDefault();
        $("#mapEditorTools").show();
        return $("#mainMenu").hide();
      });
      $("#showMainMenu").click(function(e) {
        e.preventDefault();
        $("#mapEditorTools").hide();
        return $("#mainMenu").show();
      });
      $("#showMapEditorTools").click();
      toolSelection = $("#toolSelection");
      palette = $("#palette");
      mapSize = $("#mapSize");
      mapProperties = $("#mapProperties");
      $("a", toolSelection).click(function(e) {
        e.preventDefault();
        palette.hide();
        mapSize.hide();
        mapProperties.hide();
        return $($(this).attr("value")).show();
      });
      $("#showPalette").click();
      terrainPalette = $("#terrainPalette");
      unitPalette = $("#unitPalette");
      terrainSelection = $("#terrainSelection");
      unitSelection = $("#unitSelection");
      playerSelection = $("#playerSelection");
      $(".playerSelection").each(function() {
        return $(this).css("background-color", theme.getPlayerColorString(parseInt($(this).attr("value"))));
      });
      $(".playerSelection").click(function(e) {
        e.preventDefault();
        if ($(this).hasClass("disabled")) {
          return;
        }
        $(".playerSelection").removeClass("selected");
        $(this).addClass("selected");
        return updatePalette();
      });
      $(".playerSelection:first-child").click();
      terrainSelection.click(function() {
        unitSelection.removeClass("selected");
        terrainSelection.addClass("selected");
        return updatePalette();
      });
      unitSelection.click(function() {
        terrainSelection.removeClass("selected");
        unitSelection.addClass("selected");
        return updatePalette();
      });
      terrainSelection.click();
      terrainTypePalette = $("#terrainTypePalette");
      terrainSubtypePalette = $("#terrainSubtypePalette");
      terrainType = 0;
      while (terrainType < theme.getNumberOfTileTypes()) {
        terrainTypeItem = $("<span></span>");
        terrainTypeItem.css("background-image", "url('" + theme.getSpriteSheetUrl() + "')");
        terrainTypeItem.addClass("sprite");
        terrainTypeItem.css("width", theme.settings.image.width);
        terrainTypeItem.css("height", theme.settings.image.height);
        pos = theme.getTileCoordinates(terrainType, 0, 0);
        terrainTypeItem.css("background-position", -pos.x + "px " + (-pos.y + (theme.settings.image.height - theme.settings.hex.height - theme.settings.hex.thickness)) + "px");
        terrainTypeItem.attr("type", terrainType);
        propPos = theme.getTilePropCoordinates(terrainType, 0, 0);
        if (propPos) {
          terrainProp = $("<span></span>");
          terrainProp.css("background-image", "url('" + theme.getSpriteSheetUrl() + "')");
          terrainProp.css("width", theme.settings.image.width);
          terrainProp.css("height", theme.settings.image.height);
          terrainProp.css("display", "block");
          terrainProp.css("background-position", -propPos.x + "px " + (-propPos.y - theme.settings.hex.thickness) + "px");
          terrainTypeItem.append(terrainProp);
        }
        terrainTypePalette.append(terrainTypeItem);
        terrainSubtype = 0;
        while (terrainSubtype < theme.getNumberOfTileSubtypes(terrainType)) {
          terrainOwner = 0;
          while (terrainOwner < theme.getNumberOfTileOwners(terrainType, terrainSubtype)) {
            terrainSubtypeItem = $("<span></span>");
            terrainSubtypeItem.css("background-image", "url('" + theme.getSpriteSheetUrl() + "')");
            terrainSubtypeItem.addClass("sprite");
            terrainSubtypeItem.css("width", theme.settings.image.width);
            terrainSubtypeItem.css("height", theme.settings.image.height);
            pos = theme.getTileCoordinates(terrainType, terrainSubtype, terrainOwner);
            terrainSubtypeItem.css("background-position", -pos.x + "px " + (-pos.y + (theme.settings.image.height - theme.settings.hex.height - theme.settings.hex.thickness)) + "px");
            terrainSubtypeItem.attr("type", terrainType);
            terrainSubtypeItem.attr("subtype", terrainSubtype);
            terrainSubtypeItem.attr("owner", terrainOwner);
            propPos = theme.getTilePropCoordinates(terrainType, terrainSubtype, terrainOwner);
            if (propPos) {
              terrainProp = $("<span></span>");
              terrainProp.css("background-image", "url('" + theme.getSpriteSheetUrl() + "')");
              terrainProp.css("width", theme.settings.image.width);
              terrainProp.css("height", theme.settings.image.height);
              terrainProp.css("display", "block");
              terrainProp.css("background-position", -propPos.x + "px " + (-propPos.y - theme.settings.hex.thickness) + "px");
              terrainSubtypeItem.append(terrainProp);
            }
            terrainSubtypePalette.append(terrainSubtypeItem);
            ++terrainOwner;
          }
          ++terrainSubtype;
        }
        ++terrainType;
      }
      $("#terrainTypePalette .sprite").click(function() {
        $("#terrainTypePalette .sprite.selected").removeClass("selected");
        $(this).addClass("selected");
        updatePalette();
        return updateBrushIcon();
      });
      $("#terrainSubtypePalette .sprite").click(function() {
        $("#terrainSubtypePalette .sprite.selected").removeClass("selected");
        $(this).addClass("selected");
        updatePalette();
        return updateBrushIcon();
      });
      unitEraserItem = $("<span></span>");
      unitEraserItem.attr("type", "null");
      unitEraserItem.attr("owner", "null");
      unitEraserItem.css("background-image", "url(" + theme.getEraserIconUrl() + ")");
      unitEraserItem.css("background-repeat", "no-repeat");
      unitEraserItem.css("background-position", "center");
      unitEraserItem.addClass("sprite");
      unitEraserItem.css("width", theme.settings.image.width);
      unitEraserItem.css("height", theme.settings.image.width);
      unitPalette.append(unitEraserItem);
      unitType = 0;
      while (unitType < theme.getNumberOfUnitTypes()) {
        unitOwner = 0;
        while (unitOwner < theme.getNumberOfUnitOwners(unitType)) {
          unitItem = $("<span></span>");
          pos = theme.getUnitCoordinates(unitType, unitOwner);
          if (pos === null) {
            continue;
          }
          unitItem.attr("type", unitType);
          unitItem.attr("owner", unitOwner);
          unitItem.css("background-image", "url('" + theme.getSpriteSheetUrl() + "')");
          unitItem.addClass("sprite");
          unitItem.css("width", theme.settings.image.width);
          unitItem.css("height", theme.settings.image.width);
          unitItem.css("background-position", -pos.x + "px " + -pos.y + "px");
          unitPalette.append(unitItem);
          ++unitOwner;
        }
        ++unitType;
      }
      $("#unitPalette .sprite").click(function() {
        $("#unitPalette .sprite.selected").removeClass("selected");
        $(this).addClass("selected");
        updatePalette();
        return updateBrushIcon();
      });
      terrainTypePalette.children().first().addClass("selected");
      updatePalette();
      unitPalette.children().first().addClass("selected");
      terrainSubtypePalette.children().first().addClass("selected");
      updateBrushIcon();
      mapSize.submit(function(e) {
        e.preventDefault();
        resizeMap(parseInt($("#mapWidth").val()), parseInt($("#mapHeight").val()));
        setCanvasSize(canvas);
        return mapPainter.refresh();
      });
      $("#shiftMapUp").click(shiftMapUp);
      $("#shiftMapDown").click(shiftMapDown);
      $("#shiftMapLeft").click(shiftMapLeft);
      $("#shiftMapRight").click(shiftMapRight);
      $("#mapSaveForm").submit(function(e) {
        e.preventDefault();
        return saveMap($("#mapName").val(), parseInt($("#mapFunds").val()));
      });
      $("#import").click(importMap);
      $("#export").click(exportMap);
      $("#mapImportExportForm").submit(function(e) {
        return e.preventDefault();
      });
      return $("#mapDeleteForm").submit(function(e) {
        e.preventDefault();
        if (window.confirm("Are you sure you want to delete this map?")) {
          return client.stub.deleteMap(mapId, function(response) {
            if (response.success) {
              return window.location = "/myMaps.html";
            } else {
              return alert("Error deleting map! " + response.reason);
            }
          });
        }
      });
    };
    return updateBrushIcon = function() {};
    /*
        brush = selectedBrush()
        image = $("<span></span>");
        
        brushIcon = $("#brushIcon");
        iconWidth = brushIcon.width()
        iconHeight = brushIcon.height()
        dx = (theme.settings.image.width - iconWidth) / 2
        
        image.css "width", "100%"
        image.css "height", "100%"
        image.css "position", "absolute"
        image.css "left", 0
        image.css "top", "0"
        
        if brush.unit?
          pos = theme.getUnitCoordinates(brush.unit.type, brush.unit.owner)
          image.css "background-image", "url('#{theme.getSpriteSheetUrl()}')"
          image.css "background-position", (-pos.x - dx) + "px " + (-pos.y) + "px"
        
        else if brush.type? and brush.subtype? and brush.owner?
          pos = theme.getTileCoordinates(brush.type, brush.subtype, brush.owner)
          image.css "background-image", "url('#{theme.getSpriteSheetUrl()}')"
          image.css "background-position", (-pos.x - dx) + "px " + (-pos.y + (theme.settings.image.height - theme.settings.hex.height - theme.settings.hex.thickness)) + "px"
          propPos = theme.getTilePropCoordinates(brush.type, brush.subtype, brush.owner)
          if propPos
            terrainProp = $("<span></span>")
            terrainProp.css "background-image", "url('" + theme.getSpriteSheetUrl() + "')"
            terrainProp.css "width", "100%"
            terrainProp.css "height", "100%"
            terrainProp.css "display", "block"
            terrainProp.css "background-position", (-propPos.x - dx) + "px " + (-propPos.y - theme.settings.hex.thickness) + "px"
            terrainProp.css "position", "absolute"
            terrainProp.css "left", "0"
            terrainProp.css "top", "0"
            image.append terrainProp
        else if brush.unit is null
          image.css "background-image", "url('#{theme.getEraserIconUrl()}')"
          image.css "background-position", "0px, 0px"
    
        brushIcon.empty();
        brushIcon.append(image);
    */

  });

}).call(this);
