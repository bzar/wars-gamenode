// Generated by CoffeeScript 1.3.3
(function() {

  require(["Theme", "Map", "gamenode", "base"], function(Theme, Map) {
    var client, gameId, initalizeAuthorTools, mapPainter, session, showGame, showPlayers, theme;
    client = new GameNodeClient(Skeleton);
    this.gameNodeClient = client;
    session = null;
    gameId = /[?&]gameId=([0-9a-f]+)/.exec(window.location.search);
    if (gameId !== null) {
      gameId = gameId[1];
    } else {
      document.location = "/";
    }
    theme = null;
    mapPainter = null;
    $(document).ready(function() {
      var loginUrl;
      loginUrl = "login.html?next=" + document.location.pathname + document.location.search;
      return session = resumeSessionOrRedirect(client, WARS_CLIENT_SETTINGS.gameServer, loginUrl, function() {
        client.stub.subscribeGame(gameId);
        populateNavigation(session);
        return client.stub.profile(function(response) {
          theme = new Theme(response.profile.settings.gameTheme);
          if (gameId !== null) {
            return theme.load(function() {
              mapPainter = new Map(undefined, 1.0, theme);
              mapPainter.canvas = $("#mapCanvas")[0];
              return client.stub.gameData(gameId, function(response) {
                if (response.success) {
                  if (response.game.state !== "pregame") {
                    document.location = "game.html?gameId=" + gameId;
                  }
                  initializeChat(client, gameId);
                  return showGame(response.game, response.author);
                } else {
                  return alert("Error loading game!" + response.reason);
                }
              });
            });
          }
        });
      });
    });
    showGame = function(game, author) {
      $("#gameName").text(game.name);
      if (author) {
        initalizeAuthorTools();
      } else {
        $("#authorTools").hide();
      }
      return mapPainter.doPreload(function() {
        var height, mapSize, width;
        showPlayers(game.players, author);
        mapPainter.tiles = game.tiles;
        mapSize = mapPainter.getMapDimensions();
        width = mapSize.e(1);
        height = mapSize.e(2);
        mapPainter.canvas.width = width;
        mapPainter.canvas.height = height;
        return mapPainter.refresh();
      });
    };
    showPlayers = function(players, authorMode) {
      var player, playerList, _fn, _i, _len;
      players.sort(function(a, b) {
        return a.playerNumber - b.playerNumber;
      });
      playerList = $("#players");
      _fn = function(player) {
        var item, joinButton, name, number;
        item = $("<li></li>");
        number = $("<span></span>");
        name = $("<span></span>");
        item.addClass("playerItem");
        item.attr("playerNumber", player.playerNumber);
        number.text(player.playerNumber);
        number.css("background-color", theme.getPlayerColorString(player.playerNumber));
        number.addClass("playerNumber");
        name.text((player.playerName !== null ? player.playerName : ""));
        name.addClass("playerName");
        item.append(number);
        item.append(name);
        joinButton = $("<span></span>");
        joinButton.addClass("joinButton");
        item.append(joinButton);
        joinButton.click(function() {
          if ($(this).hasClass("notJoined")) {
            return client.stub.joinGame(gameId, player.playerNumber, function(response) {
              if (!response.success) {
                return alert("Error joining game!" + response.reason);
              }
            });
          } else {
            return client.stub.leaveGame(gameId, player.playerNumber, function(response) {
              if (!response.success) {
                return alert("Error leaving game!" + response.reason);
              }
            });
          }
        });
        if (player.userId === null) {
          joinButton.addClass("notJoined");
          joinButton.text("Click to join!");
        } else {
          if (player.isMe || authorMode) {
            joinButton.addClass("joined");
            joinButton.text("X");
          } else {
            joinButton.hide();
          }
        }
        return playerList.append(item);
      };
      for (_i = 0, _len = players.length; _i < _len; _i++) {
        player = players[_i];
        _fn(player);
      }
      client.skeleton.playerJoined = function(gameId, playerNumber, playerName, isMe) {
        var joinButton, nameLabel;
        nameLabel = $(".playerItem[playerNumber=\"" + playerNumber + "\"] .playerName");
        joinButton = $(".playerItem[playerNumber=\"" + playerNumber + "\"] .joinButton");
        nameLabel.text(playerName);
        joinButton.removeClass("notJoined");
        if (isMe || authorMode) {
          joinButton.addClass("joined");
          return joinButton.text("X");
        } else {
          return joinButton.hide();
        }
      };
      client.skeleton.playerLeft = function(gameId, playerNumber) {
        var joinButton, nameLabel;
        nameLabel = $(".playerItem[playerNumber=\"" + playerNumber + "\"] .playerName");
        joinButton = $(".playerItem[playerNumber=\"" + playerNumber + "\"] .joinButton");
        joinButton.removeClass("joined");
        nameLabel.text("");
        joinButton.addClass("notJoined");
        joinButton.text("Click to join!");
        return joinButton.show();
      };
      return client.skeleton.gameStarted = function(gameId) {
        return document.location = "game.html?gameId=" + gameId;
      };
    };
    return initalizeAuthorTools = function() {
      $("#startGame").click(function(e) {
        e.preventDefault();
        return client.stub.startGame(gameId, function(response) {
          if (!response.success) {
            return alert("Error starting game! " + response.reason);
          }
        });
      });
      $("#deleteGame").click(function(e) {
        e.preventDefault();
        return client.stub.deleteGame(gameId, function(response) {
          if (response.success) {
            return document.location = "/login.html";
          } else {
            return alert("Error deleting game! " + response.reason);
          }
        });
      });
      $("#inviteForm").submit(function(e) {
        var username;
        e.preventDefault();
        username = $("#username").val();
        if (username.length > 0) {
          return client.stub.addInvite(gameId, username, function(response) {
            if (!response.success) {
              return alert("Error inviting user! " + response.reason);
            }
          });
        }
      });
      return client.stub.botNames(function(names) {
        var item, name, _i, _len, _results;
        if (!(names != null) || names.length === 0) {
          return $("#inviteForm").hide();
        } else {
          _results = [];
          for (_i = 0, _len = names.length; _i < _len; _i++) {
            name = names[_i];
            item = $("<option></option>");
            item.attr("value", name);
            item.text(name);
            _results.push($("#username").append(item));
          }
          return _results;
        }
      });
    };
  });

}).call(this);
