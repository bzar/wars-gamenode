// Generated by CoffeeScript 1.4.0
(function() {

  require(["Theme", "Map", "gamenode", "base"], function(Theme, Map) {
    var changePage, client, createGame, filterMaps, initialPage, initializeControls, lastMapId, mapId, mapPainter, paginator, populateMapFilter, populateMapInfo, populateMapTileStats, populateMaps, session, showFullMapPreview, showGameSettings, showMaps, theme, updatePageControls;
    client = new GameNodeClient(Skeleton);
    session = null;
    paginator = null;
    initialPage = /(\d+)/.exec(window.location.hash);
    if (initialPage !== null) {
      initialPage = parseInt(initialPage[1]);
    } else {
      initialPage = 1;
      window.location.hash = initialPage;
    }
    lastMapId = null;
    mapId = /[?&]mapId=([0-9a-f]+)/.exec(window.location.search);
    if (mapId !== null) {
      mapId = mapId[1];
    }
    theme = null;
    mapPainter = null;
    $(document).ready(function() {
      var loginUrl;
      loginUrl = "login.html?next=" + document.location.pathname + document.location.search;
      return session = resumeSessionOrRedirect(client, WARS_CLIENT_SETTINGS.gameServer, loginUrl, function() {
        return client.stub.profile(function(response) {
          theme = new Theme(response.profile.settings.gameTheme);
          return theme.load(function() {
            mapPainter = new Map(undefined, undefined, theme);
            initializeControls();
            populateNavigation(session);
            return mapPainter.doPreload(function() {
              if (mapId === null) {
                return showMaps();
              } else {
                return showFullMapPreview();
              }
            });
          });
        });
      });
    });
    initializeControls = function() {
      $("#turnTimeLimit").change(function() {
        if ($(this).prop("checked")) {
          return $("#timeLimitInput").show();
        } else {
          return $("#timeLimitInput").hide();
        }
      });
      $("#turnTimeLimit").change();
      $("#backToMaps").click(function(e) {
        e.preventDefault();
        return showMaps();
      });
      $("#backToMapPreview").click(function(e) {
        e.preventDefault();
        return showFullMapPreview();
      });
      $("#toGameSettings").click(function(e) {
        e.preventDefault();
        return showGameSettings();
      });
      return $("#createGame").click(function(e) {
        e.preventDefault();
        return createGame();
      });
    };
    createGame = function() {
      var hourLimit, hourLimitStr, limitTurnTime, minuteLimit, minuteLimitStr, name, publicGame, secondLimit, secondLimitStr, turnLength;
      name = $("#gameName").val();
      publicGame = $("#publicGame").prop("checked");
      limitTurnTime = $("#turnTimeLimit").prop("checked");
      hourLimitStr = $("#hourLimit").val();
      minuteLimitStr = $("#minuteLimit").val();
      secondLimitStr = $("#secondLimit").val();
      hourLimit = parseInt((hourLimitStr ? hourLimitStr : 0), 10);
      minuteLimit = parseInt((minuteLimitStr ? minuteLimitStr : 0), 10);
      secondLimit = parseInt((secondLimitStr ? secondLimitStr : 0), 10);
      turnLength = null;
      if (limitTurnTime && !isNaN(hourLimit) && !isNaN(minuteLimit) && !isNaN(secondLimit)) {
        turnLength = (hourLimit * 60 + minuteLimit) * 60 + secondLimit;
        turnLength = (turnLength ? turnLength : null);
      }
      return client.stub.createGame(name, mapId, publicGame, turnLength, function(response) {
        if (response.success) {
          return document.location = "/pregame.html?gameId=" + response.gameId;
        } else {
          return alert("Error creating game! " + response.reason);
        }
      });
    };
    showMaps = function() {
      if ($("#maps:empty").length !== 0) {
        populateMaps(client);
      }
      $("#mapSelection").show();
      $("#mapFullPreview").hide();
      $("#gameSettings").hide();
      $("#navigation").show();
      $("#selectMapControls").show();
      $("#mapPreviewControls").hide();
      $("#createGameControls").hide();
      if (document.location.search.length !== 0) {
        return history.pushState(undefined, undefined, document.location.pathname);
      }
    };
    showFullMapPreview = function() {
      if (lastMapId !== mapId) {
        client.stub.mapData(mapId, function(response) {
          var canvas, height, mapData, mapSize, width;
          mapData = response.mapData;
          populateMapInfo(response);
          populateMapTileStats(mapData);
          canvas = $("#mapCanvas");
          mapPainter.canvas = canvas[0];
          mapPainter.tiles = mapData;
          mapSize = mapPainter.getMapDimensions();
          width = mapSize.e(1);
          height = mapSize.e(2);
          canvas.attr("width", width);
          canvas.attr("height", height);
          mapPainter.scale = 1.0;
          mapPainter.autoscale = false;
          return mapPainter.refresh();
        });
      }
      $("#mapSelection").hide();
      $("#mapFullPreview").show();
      $("#gameSettings").hide();
      $("#navigation").hide();
      $("#selectMapControls").hide();
      $("#mapPreviewControls").show();
      $("#createGameControls").hide();
      history.pushState(undefined, undefined, document.location.pathname + "?mapId=" + mapId);
      return lastMapId = mapId;
    };
    showGameSettings = function() {
      $("#mapSelection").hide();
      $("#mapFullPreview").hide();
      $("#gameSettings").show();
      $("#navigation").hide();
      $("#selectMapControls").hide();
      $("#mapPreviewControls").hide();
      return $("#createGameControls").show();
    };
    changePage = function(e, page) {
      if (e !== undefined) {
        e.preventDefault();
      }
      paginator.setPage(page);
      window.location.hash = page;
      return updatePageControls();
    };
    updatePageControls = function() {
      var i, numPages, pageLink, pages, _i;
      pages = $("#pages");
      pages.empty();
      numPages = paginator.pages();
      for (i = _i = 1; 1 <= numPages ? _i <= numPages : _i >= numPages; i = 1 <= numPages ? ++_i : --_i) {
        pageLink = $("<a></a>");
        pageLink.text(i);
        pageLink.attr("href", "#" + i);
        pageLink.attr("page", i);
        pageLink.addClass("pageLink");
        pages.append(pageLink);
      }
      $("#firstPage").attr("href", "#" + paginator.firstPage()).toggle(paginator.currentPage !== paginator.firstPage());
      $("#lastPage").attr("href", "#" + paginator.lastPage()).toggle(paginator.currentPage !== paginator.lastPage());
      $("#prevPage").attr("href", "#" + paginator.prevPage()).toggle(paginator.currentPage !== paginator.firstPage());
      $("#nextPage").attr("href", "#" + paginator.nextPage()).toggle(paginator.currentPage !== paginator.lastPage());
      $(".pageLink").removeClass("current");
      $(".pageLink[page=\"" + paginator.currentPage + "\"]").addClass("current");
      $(".pageLink").click(function(e) {
        return changePage(e, parseInt($(this).attr("page")));
      });
      return $("#pageControls").toggle(paginator.pages() > 1);
    };
    populateMaps = function(client) {
      return client.stub.maps(null, function(response) {
        var mapList, maps;
        maps = response.maps;
        mapList = $("#maps");
        paginator = new Paginator(maps, (function() {
          return mapList.empty();
        }), function(map) {
          var container, funds, name, players, preview, previewCanvas;
          container = $("<a></a>");
          name = $("<div></div>");
          preview = $("<div></div>");
          funds = $("<div></div>");
          players = $("<div></div>");
          previewCanvas = $("<canvas></canvas>");
          previewCanvas.text("Preview of " + map.name);
          previewCanvas.addClass("mapThumbnail");
          previewCanvas.attr("width", 200);
          previewCanvas.attr("height", 200);
          preview.append(previewCanvas);
          name.text(map.name);
          name.addClass("name");
          funds.text("Initial funds: " + map.funds);
          funds.addClass("info");
          players.text("Max players: " + map.players);
          players.addClass("info");
          container.append(name);
          container.append(preview);
          container.append(funds);
          container.append(players);
          container.attr("mapId", map.mapId);
          container.addClass("mapContainer");
          container.click(function(e) {
            e.preventDefault();
            $(".mapContainer").removeClass("selected");
            mapId = $(this).attr("mapId");
            return showFullMapPreview();
          });
          mapList.append(container);
          return client.stub.mapData(map.mapId, function(response) {
            var mapData;
            mapData = response.mapData;
            mapPainter.canvas = previewCanvas[0];
            mapPainter.tiles = mapData;
            mapPainter.autoscale = true;
            return mapPainter.refresh();
          });
        });
        $("#firstPage").click(function(e) {
          return changePage(e, paginator.firstPage());
        });
        $("#lastPage").click(function(e) {
          return changePage(e, paginator.lastPage());
        });
        $("#nextPage").click(function(e) {
          return changePage(e, paginator.nextPage());
        });
        $("#prevPage").click(function(e) {
          return changePage(e, paginator.prevPage());
        });
        changePage(undefined, initialPage);
        return populateMapFilter(maps);
      });
    };
    filterMaps = function(maps) {
      var authorId, maxPlayers, minPlayers, namePart;
      minPlayers = parseInt($("#minPlayers").val());
      maxPlayers = parseInt($("#maxPlayers").val());
      authorId = $("#mapAuthor").val();
      namePart = $("#mapName").val().toLowerCase();
      paginator.data = maps.filter(function(map) {
        return map.players >= minPlayers && map.players <= maxPlayers && (authorId === "" || map.authorId === authorId) && (namePart === "" || map.name.toLowerCase().indexOf(namePart) !== -1);
      });
      paginator.setPage(paginator.firstPage());
      return updatePageControls();
    };
    populateMapFilter = function(maps) {
      var authors, i, mapAuthorSelect, maxOption, maxPlayers, maxPlayersSelect, minOption, minPlayers, minPlayersSelect;
      minPlayers = null;
      maxPlayers = null;
      authors = [
        {
          name: "Anyone",
          authorId: ""
        }
      ];
      maps.forEach(function(map) {
        minPlayers = (minPlayers && minPlayers < map.players ? minPlayers : map.players);
        maxPlayers = (maxPlayers && maxPlayers > map.players ? maxPlayers : map.players);
        if (!authors.some(function(author) {
          return author.authorId === new String(map.authorId);
        })) {
          return authors.push({
            name: map.authorName,
            authorId: map.authorId
          });
        }
      });
      minPlayersSelect = $("#minPlayers");
      maxPlayersSelect = $("#maxPlayers");
      i = minPlayers;
      while (i <= maxPlayers) {
        minOption = $("<option></option>");
        minOption.attr("value", i);
        minOption.text(i);
        minOption.prop("selected", i === minPlayers);
        minPlayersSelect.append(minOption);
        maxOption = $("<option></option>");
        maxOption.attr("value", i);
        maxOption.text(i);
        maxOption.prop("selected", i === maxPlayers);
        maxPlayersSelect.append(maxOption);
        ++i;
      }
      mapAuthorSelect = $("#mapAuthor");
      authors.forEach(function(author) {
        var option;
        option = $("<option></option>");
        option.attr("value", author.authorId);
        option.text(author.name);
        return mapAuthorSelect.append(option);
      });
      minPlayersSelect.change(function() {
        if (parseInt(maxPlayersSelect.val()) < parseInt($(this).val())) {
          return maxPlayersSelect.val($(this).val());
        }
      });
      maxPlayersSelect.change(function() {
        if (parseInt(minPlayersSelect.val()) > parseInt($(this).val())) {
          return minPlayersSelect.val($(this).val());
        }
      });
      return $("#mapFilterForm").submit(function(e) {
        e.preventDefault();
        return filterMaps(maps);
      });
    };
    populateMapInfo = function(map) {
      var mapInfo, newItem;
      newItem = function(text) {
        var item;
        item = $("<li></li>");
        if (text) {
          item.text(text);
        }
        mapInfo.append(item);
        return item;
      };
      mapInfo = $("#mapInfo");
      mapInfo.empty();
      newItem(map.name);
      newItem("Funds: " + map.funds);
      return newItem("Players: " + map.players);
    };
    return populateMapTileStats = function(mapData) {
      var i, stats, tile;
      stats = {};
      i = 0;
      while (i < mapData.length) {
        tile = mapData[i];
        if (!(tile.type in stats)) {
          stats[tile.type] = 1;
        } else {
          stats[tile.type] += 1;
        }
        ++i;
      }
      return client.stub.gameRules(null, function(rules) {
        var captureFlagId, flagId, image, item, mapTiles, pos, propPos, terrainProp, text, tileType, _results;
        captureFlagId = null;
        for (flagId in rules.terrainFlags) {
          if (rules.terrainFlags[flagId].name === "Capturable") {
            captureFlagId = parseInt(flagId);
            break;
          }
        }
        if (captureFlagId !== null) {
          mapTiles = $("#mapTiles");
          mapTiles.empty();
          _results = [];
          for (tileType in stats) {
            if (rules.terrains[tileType].flags.indexOf(captureFlagId) !== -1) {
              item = $("<li></li>");
              image = $("<span></span>");
              image.css("background-image", "url('" + theme.getSpriteSheetUrl() + "')");
              image.addClass("sprite");
              image.css("width", theme.settings.image.width);
              image.css("height", theme.settings.image.height);
              pos = theme.getTileCoordinates(tileType, 0, 0);
              image.css("background-position", -pos.x + "px " + (-pos.y + (theme.settings.image.height - theme.settings.hex.height - theme.settings.hex.thickness)) + "px");
              text = $("<span></span");
              text.text("x" + stats[tileType]);
              propPos = theme.getTilePropCoordinates(tileType, 0, 0);
              if (propPos) {
                terrainProp = $("<span></span>");
                terrainProp.css("background-image", "url('" + theme.getSpriteSheetUrl() + "')");
                terrainProp.css("width", theme.settings.image.width);
                terrainProp.css("height", theme.settings.image.height);
                terrainProp.css("display", "block");
                terrainProp.css("background-position", -propPos.x + "px " + (-propPos.y - theme.settings.hex.thickness) + "px");
                image.append(terrainProp);
              }
              item.append(image);
              item.append(text);
              item.addClass("mapTileStat");
              _results.push(mapTiles.append(item));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      });
    };
  });

}).call(this);
