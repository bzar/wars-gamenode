// Generated by CoffeeScript 1.4.0
(function() {

  define(function() {
    var Theme;
    Theme = (function() {

      function Theme(themeName, noHighDpi) {
        this.themeName = themeName;
        this.noHighDpi = !!noHighDpi;
        this.settings = {};
      }

      Theme.prototype.load = function(callback) {
        var that;
        that = this;
        return $.getJSON("/img/themes/" + this.themeName + "/settings.json", function(data) {
          var coords, i, image, name, sheet, sheetLayout;
          that.settings = data;
          sheet = that.settings.sheet;
          image = that.settings.image;
          sheetLayout = that.settings.sheetLayout;
          coords = {};
          i = 0;
          while (i < sheetLayout.length) {
            name = sheetLayout[i];
            if (name !== null) {
              coords[name] = {
                x: Math.floor(i % sheet.cols) * image.width,
                y: Math.floor(i / sheet.cols) * image.height
              };
            }
            ++i;
          }
          that.settings.sprites = coords;
          if (!that.noHighDpi && that.isHighDpiAvailable(that.settings.sheet)) {
            that.highDpiTheme = true;
          }
          return callback();
        });
      };

      Theme.prototype.isHighDpiAvailable = function(sheet) {
        return !!sheet.highDpiFilename;
      };

      Theme.prototype.setHighDpiCanvas = function(highDpiCanvas) {
        this.highDpiCanvas = highDpiCanvas;
      };

      Theme.prototype.isRenderInHighDpi = function() {
        return this.highDpiTheme && this.highDpiCanvas;
      };

      Theme.prototype.getSpriteSheetUrl = function() {
        return ("/img/themes/" + this.themeName + "/") + (this.isRenderInHighDpi() ? this.settings.sheet.highDpiFilename : this.settings.sheet.filename);
      };

      Theme.prototype.getCoordinates = function(name) {
        if (name != null) {
          return this.settings.sprites[name];
        } else {
          return null;
        }
      };

      Theme.prototype.getSheetCoordinate = function(coord) {
        if (this.isRenderInHighDpi()) {
          return coord * 2;
        } else {
          return coord;
        }
      };

      Theme.prototype.getOriginalSheetSize = function(size) {
        if (this.isRenderInHighDpi()) {
          return size / 2;
        } else {
          return size;
        }
      };

      Theme.prototype.getTileCoordinates = function(tileType, tileSubtype, tileOwner) {
        return this.getCoordinates(this.settings.tiles[tileType][tileSubtype][tileOwner].hex);
      };

      Theme.prototype.getTilePropCoordinates = function(tileType, tileSubtype, tileOwner) {
        return this.getCoordinates(this.settings.tiles[tileType][tileSubtype][tileOwner].prop);
      };

      Theme.prototype.getTileOffset = function(tileType, tileSubtype, tileOwner) {
        return this.settings.tiles[tileType][tileSubtype][tileOwner].offset;
      };

      Theme.prototype.getUnitCoordinates = function(unitType, unitOwner) {
        return this.getCoordinates(this.settings.units[unitType][unitOwner]);
      };

      Theme.prototype.getHealthNumberCoordinates = function(healthNumber) {
        return this.getCoordinates(this.settings.numbers.health[healthNumber]);
      };

      Theme.prototype.getDamageNumberCoordinates = function(damageNumber) {
        return this.getCoordinates(this.settings.numbers.damage[damageNumber]);
      };

      Theme.prototype.getDeployEmblemCoordinates = function() {
        return this.getCoordinates(this.settings.emblems.deploy);
      };

      Theme.prototype.getPlayerColor = function(playerNumber) {
        if (playerNumber < this.settings.playerColors.length) {
          return this.settings.playerColors[playerNumber];
        } else {
          return this.settings.playerColors[0];
        }
      };

      Theme.prototype.getPlayerColorString = function(playerNumber) {
        var c;
        c = this.getPlayerColor(playerNumber);
        return "rgb(" + c.r + "," + c.g + "," + c.b + ")";
      };

      Theme.prototype.getNumberOfUnitTypes = function() {
        return this.settings.units.length;
      };

      Theme.prototype.getNumberOfUnitOwners = function(unitType) {
        return this.settings.units[unitType].length;
      };

      Theme.prototype.getNumberOfTileTypes = function() {
        return this.settings.tiles.length;
      };

      Theme.prototype.getNumberOfTileSubtypes = function(tileType) {
        return this.settings.tiles[tileType].length;
      };

      Theme.prototype.getNumberOfTileOwners = function(tileType, tileSubtype) {
        return this.settings.tiles[tileType][tileSubtype].length;
      };

      Theme.prototype.getAttackIconUrl = function() {
        return "/img/themes/" + this.themeName + "/gui/action_attack.png";
      };

      Theme.prototype.getDeployIconUrl = function() {
        return "/img/themes/" + this.themeName + "/gui/action_deploy.png";
      };

      Theme.prototype.getUndeployIconUrl = function() {
        return "/img/themes/" + this.themeName + "/gui/action_undeploy.png";
      };

      Theme.prototype.getCaptureIconUrl = function() {
        return "/img/themes/" + this.themeName + "/gui/action_capture.png";
      };

      Theme.prototype.getWaitIconUrl = function() {
        return "/img/themes/" + this.themeName + "/gui/action_wait.png";
      };

      Theme.prototype.getLoadIconUrl = function() {
        return "/img/themes/" + this.themeName + "/gui/action_load.png";
      };

      Theme.prototype.getUnloadIconUrl = function() {
        return "/img/themes/" + this.themeName + "/gui/action_unload.png";
      };

      Theme.prototype.getCancelIconUrl = function() {
        return "/img/themes/" + this.themeName + "/gui/action_cancel.png";
      };

      Theme.prototype.getEraserIconUrl = function() {
        return "/img/themes/" + this.themeName + "/nothing.png";
      };

      return Theme;

    })();
    return Theme;
  });

}).call(this);
