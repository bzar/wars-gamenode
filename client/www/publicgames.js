// Generated by CoffeeScript 1.4.0
(function() {

  require(["gamenode", "base"], function() {
    var client, initialPage, paginator, populatePublicGames, session, updatePageControls;
    client = new GameNodeClient(Skeleton);
    session = null;
    initialPage = /(\d+)/.exec(window.location.hash);
    paginator = null;
    if (initialPage !== null) {
      initialPage = parseInt(initialPage[1]);
    } else {
      initialPage = 1;
      window.location.hash = initialPage;
    }
    $(document).ready(function() {
      var loginUrl;
      loginUrl = "login.html?next=" + document.location.pathname + document.location.search;
      return session = resumeSessionOrRedirect(client, WARS_CLIENT_SETTINGS.gameServer, loginUrl, function() {
        populateNavigation(session);
        return populatePublicGames(client);
      });
    });
    updatePageControls = function() {
      $("#firstPage").attr("href", "#" + paginator.firstPage()).toggle(paginator.currentPage !== paginator.firstPage());
      $("#lastPage").attr("href", "#" + paginator.lastPage()).toggle(paginator.currentPage !== paginator.lastPage());
      $("#prevPage").attr("href", "#" + paginator.prevPage()).toggle(paginator.currentPage !== paginator.firstPage());
      $("#nextPage").attr("href", "#" + paginator.nextPage()).toggle(paginator.currentPage !== paginator.lastPage());
      $(".pageLink").removeClass("current");
      return $(".pageLink[page=\"" + paginator.currentPage + "\"]").addClass("current");
    };
    return populatePublicGames = function(client) {
      return client.stub.publicGames(null, function(response) {
        var changePage, games, i, numPages, pageLink, pages, _i;
        changePage = function(e, page) {
          e.preventDefault();
          paginator.setPage(page);
          window.location.hash = page;
          return updatePageControls();
        };
        if (!response.success) {
          alert("Error loading games! " + response.reason);
          return;
        }
        games = $("#games tbody");
        paginator = new Paginator(response.games, (function() {
          return games.empty();
        }), function(game) {
          var gameRound, gameRoundItem, map, mapItem, name, nameItem, players, playersItem, row;
          row = $("<tr></tr>");
          nameItem = $("<td></td>");
          mapItem = $("<td></td>");
          playersItem = $("<td></td>");
          gameRoundItem = $("<td></td>");
          name = $("<a></a>");
          map = $("<a></a>");
          players = $("<a></a>");
          gameRound = $("<a></a>");
          name.text(game.name);
          map.text(game.map.name);
          players.text(game.numPlayers);
          gameRound.text(game.round);
          nameItem.append(name);
          mapItem.append(map);
          playersItem.append(players);
          gameRoundItem.append(gameRound);
          row.append(nameItem);
          row.append(mapItem);
          row.append(playersItem);
          row.append(gameRoundItem);
          $("a", row).attr("href", "game.html?gameId=" + game.gameId);
          return games.append(row);
        });
        paginator.setPage(initialPage);
        pages = $("#pages");
        numPages = paginator.pages();
        for (i = _i = 1; 1 <= numPages ? _i <= numPages : _i >= numPages; i = 1 <= numPages ? ++_i : --_i) {
          pageLink = $("<a></a>");
          pageLink.text(i);
          pageLink.attr("href", "#" + i);
          pageLink.attr("page", i);
          pageLink.addClass("pageLink");
          pages.append(pageLink);
        }
        updatePageControls();
        $(".pageLink").click(function(e) {
          return changePage(e, parseInt($(this).attr("page")));
        });
        $("#firstPage").click(function(e) {
          return changePage(e, paginator.firstPage());
        });
        $("#lastPage").click(function(e) {
          return changePage(e, paginator.lastPage());
        });
        $("#nextPage").click(function(e) {
          return changePage(e, paginator.nextPage());
        });
        $("#prevPage").click(function(e) {
          return changePage(e, paginator.prevPage());
        });
        if (paginator.pages() === 1) {
          return $("#pageControls").hide();
        }
      });
    };
  });

}).call(this);
