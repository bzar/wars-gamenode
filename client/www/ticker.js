// Generated by CoffeeScript 1.4.0
(function() {
  var MessageTicker;

  MessageTicker = (function() {

    function MessageTicker(box, map) {
      this.box = box;
      this.map = map;
      this.showAll = false;
      this.numMessages = 10;
    }

    return MessageTicker;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).MessageTicker = MessageTicker;

  MessageTicker.prototype.showToggle = function() {
    this.showAll = !this.showAll;
    if (this.showAll) {
      if (this.onlyShort) {
        this.onlyShort = false;
        this.getEventLog();
      }
      return $(".tickerMessage", this.box).show();
    } else {
      return $(".tickerMessage:gt(" + (this.numMessages - 1) + ")", this.box).hide();
    }
  };

  MessageTicker.prototype.setMessages = function(msgArray) {
    var msg, _i, _len;
    this.box.empty();
    if (msgArray && msgArray.length > 0) {
      for (_i = 0, _len = msgArray.length; _i < _len; _i++) {
        msg = msgArray[_i];
        msg = this.parseMessage(msg);
        if (msg === null) {
          continue;
        }
        this.box.append(msg);
      }
      return $(".tickerMessage:gt(" + (this.numMessages - 1) + ")", this.box).hide();
    }
  };

  MessageTicker.prototype.showOldMessages = function(msgArray) {
    var msg, _i, _len, _results;
    if (msgArray && msgArray.length > 0) {
      _results = [];
      for (_i = 0, _len = msgArray.length; _i < _len; _i++) {
        msg = msgArray[_i];
        msg = this.parseMessage(msg);
        if (msg === null) {
          continue;
        }
        _results.push(this.box.append(msg));
      }
      return _results;
    }
  };

  MessageTicker.prototype.showMessages = function(msgArray) {
    var i, msg, _i, _len, _results,
      _this = this;
    if (msgArray && msgArray.length > 0) {
      _results = [];
      for (i = _i = 0, _len = msgArray.length; _i < _len; i = ++_i) {
        msg = msgArray[i];
        msg = this.parseMessage(msg);
        if (msg === null) {
          continue;
        }
        this.box.prepend(msg);
        msg.hide();
        _results.push(setTimeout((function() {
          msg.show();
          if (!_this.showAll) {
            return $(".tickerMessage:last", _this.box).hide();
          }
        }), i * 500));
      }
      return _results;
    }
  };

  MessageTicker.prototype.parseMessage = function(message) {
    var data, msg, player, tickerMessage, time;
    msg = null;
    player = null;
    time = new Date(Date.parse(message.time));
    data = message.content;
    if (data.action === "attack") {
      msg = [
        {
          type: "unit",
          unit: data.attacker
        }, {
          type: "text",
          text: "attacks"
        }, {
          type: "unit",
          unit: data.target
        }, {
          type: "text",
          text: "inflicting " + data.damage + "% damage"
        }
      ];
      player = data.attacker.owner;
    } else if (data.action === "counterattack") {
      if (data.damage) {
        msg = [
          {
            type: "unit",
            unit: data.attacker
          }, {
            type: "text",
            text: "counterattacks"
          }, {
            type: "unit",
            unit: data.target
          }, {
            type: "text",
            text: "inflicting " + data.damage + "% damage"
          }
        ];
      } else {
        msg = [
          {
            type: "unit",
            unit: data.attacker
          }, {
            type: "text",
            text: "cannot counterattack"
          }, {
            type: "unit",
            unit: data.target
          }
        ];
      }
      player = data.attacker.owner;
    } else if (data.action === "capture") {
      msg = [
        {
          type: "unit",
          unit: data.unit
        }, {
          type: "text",
          text: "captures"
        }, {
          type: "tile",
          tile: data.tile
        }, {
          type: "text",
          text: "(" + data.left + " capture points left)"
        }
      ];
      player = data.unit.owner;
    } else if (data.action === "captured") {
      msg = [
        {
          type: "unit",
          unit: data.unit
        }, {
          type: "text",
          text: "captured"
        }, {
          type: "tile",
          tile: data.tile
        }
      ];
      player = data.unit.owner;
    } else if (data.action === "deploy") {
      msg = [
        {
          type: "unit",
          unit: data.unit
        }, {
          type: "text",
          text: "deploys"
        }
      ];
      player = data.unit.owner;
    } else if (data.action === "undeploy") {
      msg = [
        {
          type: "unit",
          unit: data.unit
        }, {
          type: "text",
          text: "undeploys"
        }
      ];
      player = data.unit.owner;
    } else if (data.action === "load") {
      msg = [
        {
          type: "unit",
          unit: data.unit
        }, {
          type: "text",
          text: "loads into"
        }, {
          type: "unit",
          unit: data.carrier
        }
      ];
      player = data.unit.owner;
    } else if (data.action === "unload") {
      msg = [
        {
          type: "unit",
          unit: data.unit
        }, {
          type: "text",
          text: "unloads from"
        }, {
          type: "unit",
          unit: data.carrier
        }
      ];
      player = data.unit.owner;
    } else if (data.action === "destroyed") {
      msg = [
        {
          type: "unit",
          unit: data.unit
        }, {
          type: "text",
          text: "is destroyed"
        }
      ];
      player = data.unit.owner;
    } else if (data.action === "repair") {
      msg = [
        {
          type: "tile",
          tile: data.tile
        }, {
          type: "text",
          text: "heals"
        }, {
          type: "unit",
          unit: data.unit
        }, {
          type: "text",
          text: "to " + data.newHealth + "% health"
        }
      ];
      player = data.unit.owner;
    } else if (data.action === "build") {
      msg = [
        {
          type: "tile",
          tile: data.tile
        }, {
          type: "text",
          text: "builds"
        }, {
          type: "unit",
          unit: data.unit
        }
      ];
      player = data.unit.owner;
    } else if (data.action === "regenerateCapturePoints") {
      msg = [
        {
          type: "tile",
          tile: data.tile
        }, {
          type: "text",
          text: "regenerates capture points (" + data.newCapturePoints + " left)"
        }
      ];
      player = data.tile.owner;
    } else if (data.action === "produceFunds") {
      msg = [
        {
          type: "tile",
          tile: data.tile
        }, {
          type: "text",
          text: "produces funds"
        }
      ];
      player = data.tile.owner;
    } else if (data.action === "beginTurn") {
      msg = [
        {
          type: "text",
          text: "Player " + data.player + "'s turn"
        }
      ];
      player = data.player;
    } else if (data.action === "endTurn") {
      msg = [
        {
          type: "text",
          text: "Player " + data.player + " yields the turn"
        }
      ];
      player = data.player;
    } else if (data.action === "turnTimeout") {
      msg = [
        {
          type: "text",
          text: "Player " + data.player + "'s turn timed out"
        }
      ];
      player = data.player;
    } else if (data.action === "surrender") {
      msg = [
        {
          type: "text",
          text: "Player " + data.player + " surrenders!"
        }
      ];
      player = data.player;
    } else if (data.action === "finished") {
      msg = [
        {
          type: "text",
          text: "Game finished! Player " + data.winner + " wins!"
        }
      ];
      player = data.winner;
    } else {
      return null;
    }
    msg.unshift({
      type: "time",
      time: time
    });
    tickerMessage = $("<li></li>");
    tickerMessage.addClass("tickerMessage");
    if (player) {
      tickerMessage.css("background-color", this.map.theme.getPlayerColorString(parseInt(player)));
    }
    this.createTickerMessage(msg, tickerMessage);
    return tickerMessage;
  };

  MessageTicker.prototype.createTickerMessage = function(parts, rootElement) {
    var image, part, pos, propPos, terrainProp, text, timeString, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = parts.length; _i < _len; _i++) {
      part = parts[_i];
      if (part.type === "text") {
        text = $("<span></span>");
        text.text(part.text);
        _results.push(rootElement.append(text));
      } else if (part.type === "time") {
        text = $("<span></span>");
        timeString = "[" + part.time.getFullYear() + "-" + zeroPad(part.time.getMonth() + 1, 2) + "-" + zeroPad(part.time.getDate(), 2) + " " + zeroPad(part.time.getHours(), 2) + ":" + zeroPad(part.time.getMinutes(), 2) + ":" + zeroPad(part.time.getSeconds(), 2) + "] ";
        text.text(timeString);
        text.addClass("time");
        _results.push(rootElement.append(text));
      } else if (part.type === "unit") {
        image = $("<span></span>");
        image.addClass("sprite");
        image.css("background-image", "url(" + this.map.theme.getSpriteSheetUrl() + ")");
        pos = this.map.theme.getUnitCoordinates(part.unit.type, part.unit.owner);
        image.css("background-position", -pos.x + "px " + -pos.y + "px");
        image.css("width", this.map.theme.settings.image.width);
        image.css("height", this.map.theme.settings.image.height);
        _results.push(rootElement.append(image));
      } else if (part.type === "tile") {
        image = $("<span></span>");
        image.addClass("sprite");
        image.css("background-image", "url(" + this.map.theme.getSpriteSheetUrl() + ")");
        pos = this.map.theme.getTileCoordinates(part.tile.type, part.tile.subtype, part.tile.owner);
        image.css("background-position", -pos.x + "px " + (-pos.y + (this.map.theme.settings.image.height - this.map.theme.settings.hex.height - this.map.theme.settings.hex.thickness)) + "px");
        image.css("width", this.map.theme.settings.image.width);
        image.css("height", this.map.theme.settings.image.height);
        propPos = this.map.theme.getTilePropCoordinates(part.tile.type, part.tile.subtype, part.tile.owner);
        if (propPos) {
          terrainProp = $("<span></span>");
          terrainProp.css("background-image", "url('" + this.map.theme.getSpriteSheetUrl() + "')");
          terrainProp.css("width", this.map.theme.settings.image.width);
          terrainProp.css("height", this.map.theme.settings.image.height);
          terrainProp.css("display", "block");
          terrainProp.css("background-position", -propPos.x + "px " + (-propPos.y - this.map.theme.settings.hex.thickness) + "px");
          image.append(terrainProp);
        }
        _results.push(rootElement.append(image));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);
