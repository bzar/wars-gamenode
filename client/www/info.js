// Generated by CoffeeScript 1.4.0
(function() {

  require(["Theme", "gamenode", "base"], function(Theme) {
    var client, maxRange, populateArmorNames, populateDefenses, populateInfo, populateMovement, populateRangeNumbers, populateRanges, populateTerrainNames, populateUnits, populateWeapons, session, theme;
    client = new GameNodeClient(Skeleton);
    session = null;
    theme = null;
    $(document).ready(function() {
      var loginUrl;
      loginUrl = "login.html?next=" + document.location.pathname + document.location.search;
      return session = resumeSessionOrRedirect(client, WARS_CLIENT_SETTINGS.gameServer, loginUrl, function() {
        populateNavigation(session);
        return client.stub.profile(function(response) {
          theme = new Theme(response.profile.settings.gameTheme);
          return theme.load(function() {
            return client.stub.gameRules(null, function(rules) {
              return populateInfo(rules);
            });
          });
        });
      });
    });
    populateInfo = function(rules) {
      populateArmorNames(rules);
      populateTerrainNames(rules);
      populateRangeNumbers(rules);
      populateUnits(rules);
      populateWeapons(rules);
      populateRanges(rules);
      populateDefenses(rules);
      return populateMovement(rules);
    };
    populateArmorNames = function(rules) {
      var numArmors;
      numArmors = 0;
      forEachProperty(rules.armors, function(armor) {
        numArmors += 1;
        return $(".armorNames").each(function() {
          var item;
          item = $("<th></th>");
          item.text(armor.name);
          return $(this).append(item);
        });
      });
      return $(".numArmors").attr("colspan", numArmors);
    };
    populateTerrainNames = function(rules) {
      var numTerrains;
      numTerrains = 0;
      forEachProperty(rules.terrains, function(terrain) {
        numTerrains += 1;
        $(".terrainNames").each(function() {
          var item;
          item = $("<th></th>");
          item.text(terrain.name);
          return $(this).append(item);
        });
        return $(".terrainImages").each(function() {
          var item, pos, propPos, terrainProp, terrainTypeItem;
          item = $("<td></td>");
          terrainTypeItem = $("<span></span>");
          terrainTypeItem.css("background-image", "url('" + theme.getSpriteSheetUrl() + "')");
          terrainTypeItem.addClass("sprite");
          terrainTypeItem.css("width", theme.settings.image.width);
          terrainTypeItem.css("height", theme.settings.image.height);
          pos = theme.getTileCoordinates(terrain.id, 0, 0);
          terrainTypeItem.css("background-position", -pos.x + "px " + (-pos.y + (theme.settings.image.height - theme.settings.hex.height - theme.settings.hex.thickness)) + "px");
          terrainTypeItem.attr("type", terrain.id);
          propPos = theme.getTilePropCoordinates(terrain.id, 0, 0);
          if (propPos) {
            terrainProp = $("<span></span>");
            terrainProp.css("background-image", "url('" + theme.getSpriteSheetUrl() + "')");
            terrainProp.css("width", theme.settings.image.width);
            terrainProp.css("height", theme.settings.image.height - theme.settings.hex.thickness);
            terrainProp.css("display", "block");
            terrainProp.css("background-position", -propPos.x + "px " + (-propPos.y - theme.settings.hex.thickness) + "px");
            terrainTypeItem.append(terrainProp);
          }
          item.append(terrainTypeItem);
          return $(this).append(item);
        });
      });
      return $(".numTerrains").attr("colspan", numTerrains);
    };
    maxRange = function(rules) {
      var result;
      result = 0;
      forEachProperty(rules.weapons, function(weapon) {
        return forEachProperty(weapon.rangeMap, function(efficiency, range) {
          if (range > result) {
            return result = range;
          }
        });
      });
      return result;
    };
    populateRangeNumbers = function(rules) {
      var max;
      max = maxRange(rules);
      $(".rangeNumbers").each(function() {
        var item, j, _results;
        j = 1;
        _results = [];
        while (j <= max) {
          item = $("<th></th>");
          item.text(j);
          $(this).append(item);
          _results.push(++j);
        }
        return _results;
      });
      return $(".numRanges").attr("colspan", max);
    };
    populateUnits = function(rules) {
      var units;
      units = $("#units tbody");
      return forEachProperty(rules.units, function(unit) {
        var armorName, carry, carryClasses, className, flags, image, item, movement, movementTypeName, name, pos, price, primaryWeaponName, secondaryWeaponName;
        item = $("<tr></tr>");
        image = $("<td></td>");
        name = $("<td></td>");
        className = $("<td></td>");
        price = $("<td></td>");
        armorName = $("<td></td>");
        primaryWeaponName = $("<td></td>");
        secondaryWeaponName = $("<td></td>");
        movement = $("<td></td>");
        movementTypeName = $("<td></td>");
        carry = $("<td></td>");
        flags = $("<td></td>");
        image = $("<td></td>");
        pos = theme.getUnitCoordinates(unit.id, 1);
        image.attr("type", unit.id);
        image.attr("owner", 1);
        image.css("background-image", "url('" + theme.getSpriteSheetUrl() + "')");
        image.addClass("sprite");
        image.css("width", theme.settings.image.width);
        image.css("height", theme.settings.image.width);
        image.css("background-position", -pos.x + "px " + -pos.y + "px");
        name.text(unit.name);
        name.addClass("name");
        className.text(rules.unitClasses[unit.unitClass].name);
        price.text(unit.price);
        armorName.text(rules.armors[unit.armor].name);
        primaryWeaponName.text((unit.primaryWeapon !== null ? rules.weapons[unit.primaryWeapon].name : "-"));
        secondaryWeaponName.text((unit.secondaryWeapon !== null ? rules.weapons[unit.secondaryWeapon].name : "-"));
        movement.text(unit.movement);
        movementTypeName.text(rules.movementTypes[unit.movementType].name);
        carryClasses = unit.carryClasses.map(function(classId) {
          return rules.unitClasses[classId].name;
        }).join(", ");
        carry.text((unit.carryNum > 0 ? unit.carryNum + "x " + carryClasses : "-"));
        flags.text(unit.flags.map(function(flagId) {
          return rules.unitFlags[flagId].name;
        }).join(", "));
        item.append(image);
        item.append(name);
        item.append(className);
        item.append(price);
        item.append(armorName);
        item.append(primaryWeaponName);
        item.append(secondaryWeaponName);
        item.append(movement);
        item.append(movementTypeName);
        item.append(carry);
        item.append(flags);
        return units.append(item);
      });
    };
    populateWeapons = function(rules) {
      var weapons;
      weapons = $("#weapons tbody");
      return forEachProperty(rules.weapons, function(weapon) {
        var item, name;
        item = $("<tr></tr>");
        name = $("<td></td>");
        name.text(weapon.name);
        item.append(name);
        forEachProperty(rules.armors, function(armor) {
          var power, powerItem;
          power = weapon.powerMap[armor.id];
          powerItem = $("<td></td>");
          powerItem.text((power ? power : "-"));
          return item.append(powerItem);
        });
        return weapons.append(item);
      });
    };
    populateRanges = function(rules) {
      var ranges;
      ranges = $("#ranges tbody");
      return forEachProperty(rules.weapons, function(weapon) {
        var efficiency, efficiencyItem, item, max, name, range, requireDeployed;
        item = $("<tr></tr>");
        name = $("<td></td>");
        requireDeployed = $("<td></td>");
        name.text(weapon.name);
        requireDeployed.text((weapon.requireDeployed ? "x" : ""));
        item.append(name);
        max = maxRange(rules);
        range = 1;
        while (range <= max) {
          efficiency = weapon.rangeMap[range];
          efficiencyItem = $("<td></td>");
          efficiencyItem.text((efficiency ? efficiency : "-"));
          item.append(efficiencyItem);
          ++range;
        }
        item.append(requireDeployed);
        return ranges.append(item);
      });
    };
    populateDefenses = function(rules) {
      var defenses;
      defenses = $("#defenses tbody");
      return forEachProperty(rules.units, function(unit) {
        var image, item, movementType, name, pos;
        movementType = rules.movementTypes[unit.movementType];
        item = $("<tr></tr>");
        name = $("<td></td>");
        image = $("<td></td>");
        pos = theme.getUnitCoordinates(unit.id, 1);
        image.attr("type", unit.id);
        image.attr("owner", 1);
        image.css("background-image", "url('" + theme.getSpriteSheetUrl() + "')");
        image.addClass("sprite");
        image.css("width", theme.settings.image.width);
        image.css("height", theme.settings.image.width);
        image.css("background-position", -pos.x + "px " + -pos.y + "px");
        name.text(unit.name);
        item.append(image);
        item.append(name);
        forEachProperty(rules.terrains, function(terrain) {
          var canTraverse, defense, defenseItem;
          canTraverse = movementType.effectMap[terrain.id] !== null;
          defense = unit.defenseMap[terrain.id];
          defenseItem = $("<td></td>");
          if (canTraverse) {
            defenseItem.text((defense !== undefined ? defense : terrain.defense));
          } else {
            defenseItem.text("-");
          }
          return item.append(defenseItem);
        });
        return defenses.append(item);
      });
    };
    return populateMovement = function(rules) {
      var movements;
      movements = $("#movement tbody");
      return forEachProperty(rules.movementTypes, function(movementType) {
        var item, name;
        item = $("<tr></tr>");
        name = $("<td></td>");
        name.text(movementType.name);
        item.append(name);
        forEachProperty(rules.terrains, function(terrain) {
          var cost, movementItem;
          cost = movementType.effectMap[terrain.id];
          cost = (cost !== undefined ? cost : 1);
          movementItem = $("<td></td>");
          movementItem.text((cost !== null ? cost : "-"));
          return item.append(movementItem);
        });
        return movements.append(item);
      });
    };
  });

}).call(this);
